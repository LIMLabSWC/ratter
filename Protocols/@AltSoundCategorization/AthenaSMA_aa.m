
function  [varargout] =  AthenaSMA(obj, action)

GetSoloFunctionArgs;


switch action
	
	case 'init'
		
		srate=SoundManagerSection(obj,'get_sample_rate');
		freq1=5;
		dur1=1.5*1000;
		Vol=1;
		tw=Vol*(MakeBupperSwoop(srate,0, freq1 , freq1 , dur1/2 , dur1/2,0,0.1));
		SoundManagerSection(obj, 'declare_new_sound', 'LRewardSound', [tw ; zeros(1, length(tw))])
		SoundManagerSection(obj, 'declare_new_sound', 'RRewardSound', [zeros(1, length(tw));tw])
		SoundManagerSection(obj, 'send_not_yet_uploaded_sounds');
		
	case 'prepare_next_trial',
		
		%% Setup water
		min_time= 2.5E-4;  % This is less than the minumum time allowed for a state transition.
		
		left1led           = bSettings('get', 'DIOLINES', 'left1led');
		center1led         = bSettings('get', 'DIOLINES', 'center1led');
		right1led          = bSettings('get', 'DIOLINES', 'right1led');
		left1water         = bSettings('get', 'DIOLINES', 'left1water');
		right1water        = bSettings('get', 'DIOLINES', 'right1water');
		
				
		%% Setup sounds
		sone_sound_id     = SoundManagerSection(obj, 'get_sound_id', 'SOneSound');
		stwo_sound_id     = SoundManagerSection(obj, 'get_sound_id', 'STwoSound');
		go_sound_id       = SoundManagerSection(obj, 'get_sound_id', 'GoSound');
		go_cue_duration   = SoundManagerSection(obj, 'get_sound_duration', 'GoSound');
		RLreward_sound_id = SoundManagerSection(obj, 'get_sound_id', 'RewardSound');
		err_sound_id      = SoundManagerSection(obj, 'get_sound_id', 'ErrorSound');
		viol_sound_id     = SoundManagerSection(obj, 'get_sound_id', 'ViolationSound');
		viol_snd_duration = SoundManagerSection(obj, 'get_sound_duration', 'ViolationSound');
		to_sound_id       = SoundManagerSection(obj, 'get_sound_id', 'TimeoutSound');
		timeout_duration  = SoundManagerSection(obj, 'get_sound_duration', 'TimeoutSound');
		Lreward_sound_id  = SoundManagerSection(obj, 'get_sound_id', 'LRewardSound');
		Rreward_sound_id  = SoundManagerSection(obj, 'get_sound_id', 'RRewardSound');
		
	    A1_sound_id  = SoundManagerSection(obj, 'get_sound_id', 'StimAUD1');
        A2_sound_id  = SoundManagerSection(obj, 'get_sound_id', 'StimAUD2');

		%% Declare variables
		% These will get moved to other functions as SoloParamHandles.
				
		[LeftWMult RightWMult] = SideSection(obj, 'get_water_mult');
		[LeftWValveTime RightWValveTime] = WaterValvesSection(obj, 'get_water_times');
		LeftWValveTime=LeftWValveTime*LeftWMult;
		RightWValveTime=RightWValveTime*RightWMult;
		
        
		side = SideSection(obj, 'get_current_side');
		if side == 'l'
			HitEvent = 'Lin'; HitState = 'LeftHit'; WaterTime = LeftWValveTime; WaterValve = left1water; SideLight = left1led;
			RightWValveTime=0; correct_response='Lin'; error_response='Rin'; reward_sound_id=Lreward_sound_id; first_wrong='Rin';
			
		else
			HitEvent = 'Rin'; HitState = 'RightHit';  WaterTime = RightWValveTime; WaterValve = right1water;  SideLight = right1led;
			LeftWValveTime=0; correct_response='Rin'; error_response='Lin'; reward_sound_id=Rreward_sound_id; first_wrong='Lin';
		end;
		
% 		
%         maxasymp=38;
%         slp=3;
%         inflp=300;
%         minasymp=-20;
%         assym=0.7;
%         WaterTime=maxasymp + (minasymp./(1+(n_done_trials/inflp).^slp).^assym);

		sma = StateMachineAssembler('full_trial_structure','use_happenings', 1);
		
		sma = add_scheduled_wave(sma, 'name', 'reward_delivery', 'preamble', reward_delay, ...
			'sustain', WaterTime, 'DOut', WaterValve);
		sma = add_scheduled_wave(sma, 'name', 'center_poke', 'preamble', CP_duration, ...
			'sustain', go_cue_duration, 'sound_trig', go_sound_id);
		
        sma = add_scheduled_wave(sma, 'name', 'settling_period', 'preamble', SettlingIn_time);
        
		
		sma = add_scheduled_wave(sma, 'name', 'stimA1', 'preamble', PreStim_time, ...
		        'sustain', A1_time, 'sound_trig', A1_sound_id);
            
        sma = add_scheduled_wave(sma, 'name', 'stimA2', 'preamble', PreStim_time+A1_time+Del_time, ...
		        'sustain', A2_time,'sound_trig', A2_sound_id);
		
		switch value(training_stage)
			
			case 0  %% learning the reward sound association -left or right led on -> poke -> sound+reward
				sma = add_state(sma, 'name', 'sideled_on', 'self_timer', SideLed_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{'Tup','wait_for_collecting_reward'});
				
				sma = add_state(sma, 'name', 'wait_for_collecting_reward', 'self_timer', RewardCollection_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{HitEvent,'hit_state','Tup','wait_for_collecting_reward',first_wrong,'second_hit_state'});
				
				sma = add_state(sma,'name','second_hit_state','self_timer',RewardCollection_duration,...
					'output_actions',{'DOut', SideLight},...
					'input_to_statechange',{'Tup','second_hit_state',HitEvent,'hit_state'});
				
				sma = add_state(sma,'name','hit_state','self_timer',0.01,...
					'output_actions', {'DOut', SideLight,'SchedWaveTrig','reward_delivery','SoundOut',reward_sound_id},...
					'input_to_statechange',{'Tup','drink_state'});
				
				
			case 1  %%  center led on -> poke in the center -> go cue -> reward light and sound -- waiting time grows slowlly
				sma = add_state(sma,'name','wait_for_cpoke','self_timer',CenterLed_duration, ...
					'output_actions', {'DOut', center1led}, ...
					'input_to_statechange', {'Cin','cp';'Tup','timeout_state'});
				
				% center poke starts: trigger center_poke scheduled wave,
				% and when that ends go to side_led_on
				sma = add_state(sma,'name','cp','self_timer', SettlingIn_time, ...
					'output_actions', {'SchedWaveTrig', 'center_poke + settling_period'}, ...
					'input_to_statechange', {'Tup', 'cp_legal_cbreak_period', ...
					    'Cout','current_state+1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});

              
               % nose is out and we're in "SettlingIn_time":
               % if settling_legal_cbreak time elapses, go to violation state,
               % if nose is put back in, go to copy of cp start 
               % when SettlingIn_time elapses (settling_period_In) "legal cbreaks" changes to usueal legal_cbreaks 
				sma = add_state(sma, 'self_timer', settling_legal_cbreak+0.00001, ...
					'output_actions', {'DOut', center1led*LED_during_settling_legal_cbreak}, ...
					'input_to_statechange', {'Tup', 'violation_state', ...
					    'Cin', 'current_state+1', ...
					    'settling_period_In', 'cp_legal_cbreak_period', ...
                        'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
                
                % center poke:
				% A copy of two states above, but without triggering the
				% start of the center_poke scheduled wave. 
				sma = add_state(sma, 'self_timer', 10000, ...
					'input_to_statechange', {'Cout', 'current_state-1', ...
                        'settling_period_In','cp_legal_cbreak_period', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
                    
                % SettlingIn_time elapsed and from now on cbreaks are treated given legal_cbreaks    
                sma = add_state(sma,'name','cp_legal_cbreak_period', 'self_timer', 10000, ...
					'input_to_statechange', {'Cout', 'current_state+1', ...
					    'Clo', 'current_state+1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
                    
                % nose is out and we're still in legal_cbreak:
				% if legal_cbreak time elapses, go to violation_state, 
				% if nose is put back in, go to copy of cp start
				sma = add_state(sma, 'self_timer', legal_cbreak+0.00001, ...
					'output_actions', {'DOut', center1led*LED_during_legal_cbreak}, ...
					'input_to_statechange', {'Tup', 'violation_state', ...
					    'Cin', 'current_state+1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
				
				% center poke:
				% A copy of two states above, but without triggering the
				% start of the center_poke scheduled wave. 
				sma = add_state(sma, 'self_timer', 10000, ...
					'input_to_statechange', {'Cout', 'current_state-1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
					
				sma = add_state(sma, 'name', 'sideled_on', 'self_timer', SideLed_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{'Tup','wait_for_collecting_reward'});
				
				sma = add_state(sma, 'name', 'wait_for_collecting_reward', 'self_timer', RewardCollection_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{HitEvent,'hit_state','Tup','wait_for_collecting_reward',first_wrong,'second_hit_state'});
				
				sma = add_state(sma,'name','second_hit_state','self_timer',RewardCollection_duration,...
					'output_actions',{'DOut', SideLight},...
					'input_to_statechange',{'Tup','second_hit_state',HitEvent,'hit_state'});
				
				sma = add_state(sma,'name','hit_state','self_timer',0.01,...
					'output_actions', {'DOut', SideLight,'SchedWaveTrig','reward_delivery','SoundOut',reward_sound_id},...
					'input_to_statechange',{'Tup','drink_state'});
				
			case 2  %  like stage 1 - now passive exposure to the stimuli - reward comes anyway 
				sma = add_state(sma,'name','wait_for_cpoke','self_timer',CenterLed_duration, ...
					'output_actions', {'DOut', center1led}, ...
					'input_to_statechange', {'Cin','cp';'Tup','timeout_state'});
				
				% center poke starts: trigger center_poke scheduled wave,
				% and when that ends go to side_led_on
				sma = add_state(sma,'name','cp','self_timer', SettlingIn_time, ...
					'output_actions', {'SchedWaveTrig', 'center_poke + settling_period+stimA1+stimA2'}, ...
					'input_to_statechange', {'Tup', 'cp_legal_cbreak_period', ...
					    'Cout','current_state+1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});

              
               % nose is out and we're in "SettlingIn_time":
               % if settling_legal_cbreak time elapses, go to violation state,
               % if nose is put back in, go to copy of cp start 
               % when SettlingIn_time elapses (settling_period_In) "legal cbreaks" changes to usueal legal_cbreaks 
				sma = add_state(sma, 'self_timer', settling_legal_cbreak+0.00001, ...
					'output_actions', {'DOut', center1led*LED_during_settling_legal_cbreak}, ...
					'input_to_statechange', {'Tup', 'violation_state', ...
					    'Cin', 'current_state+1', ...
					    'settling_period_In', 'cp_legal_cbreak_period', ...
                        'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
                
                % center poke:
				% A copy of two states above, but without triggering the
				% start of the center_poke scheduled wave. 
				sma = add_state(sma, 'self_timer', 10000, ...
					'input_to_statechange', {'Cout', 'current_state-1', ...
                        'settling_period_In','cp_legal_cbreak_period', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
                    
                % SettlingIn_time elapsed and from now on cbreaks are treated given legal_cbreaks    
                sma = add_state(sma,'name','cp_legal_cbreak_period', 'self_timer', 10000, ...
					'input_to_statechange', {'Cout', 'current_state+1', ...
					    'Clo', 'current_state+1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
                    
                % nose is out and we're still in legal_cbreak:
				% if legal_cbreak time elapses, go to violation_state, 
				% if nose is put back in, go to copy of cp start
				sma = add_state(sma, 'self_timer', legal_cbreak+0.00001, ...
					'output_actions', {'DOut', center1led*LED_during_legal_cbreak}, ...
					'input_to_statechange', {'Tup', 'violation_state', ...
					    'Cin', 'current_state+1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
				
				% center poke:
				% A copy of two states above, but without triggering the
				% start of the center_poke scheduled wave. 
				sma = add_state(sma, 'self_timer', 10000, ...
					'input_to_statechange', {'Cout', 'current_state-1', ...
					    'center_poke_Out', 'sideled_on', ...
						'Rin',  'violation_state', ...
						'Rout', 'violation_state', ...
						'Lin', 'violation_state', ...
						'Lout', 'violation_state'});
					
				sma = add_state(sma, 'name', 'sideled_on', 'self_timer', SideLed_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{'Tup','wait_for_collecting_reward'});
				
				sma = add_state(sma, 'name', 'wait_for_collecting_reward', 'self_timer', RewardCollection_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{HitEvent,'hit_state','Tup','wait_for_collecting_reward',first_wrong,'second_hit_state'});
				
				sma = add_state(sma,'name','second_hit_state','self_timer',RewardCollection_duration,...
					'output_actions',{'DOut', SideLight},...
					'input_to_statechange',{'Tup','second_hit_state',HitEvent,'hit_state'});
				
				sma = add_state(sma,'name','hit_state','self_timer',0.01,...
					'output_actions', {'DOut', SideLight,'SchedWaveTrig','reward_delivery','SoundOut',reward_sound_id},...
					'input_to_statechange',{'Tup','drink_state'});
				
			case 3 % like stage 2, 
				
				
			case 4 %% now reward comes only if rat goes to the correct side
				sma = add_state(sma, 'name', 'sideled_on', 'self_timer', SideLed_duration, ...
					'output_actions', {'DOut', SideLight}, ...
					'input_to_statechange',{correct_response, 'hit_state'; error_response,'error_state';...
					'Tup','timeout_state'});
				
				sma = add_state(sma,'name','error_state','self_timer',error_iti,...
					'output_actions',{'SoundOut',err_sound_id},...
					'input_to_statechange',{'Tup','check_next_trial_ready'});
				
				sma = add_state(sma,'name','hit_state','self_timer',WaterTime+0.1,...
					'output_actions',{'SchedWaveTrig','reward_delivery','SoundOut',reward_sound_id},...
					'input_to_statechange',{'Tup','drink_state'});
				
		end %end of swith for different training_stages
		
		
		sma = add_state(sma,'name','drink_state','self_timer',drink_time,...
			'input_to_statechange',{'Tup','check_next_trial_ready'});
		
		sma = add_state(sma,'name','violation_state','self_timer',viol_snd_duration,...
			'output_actions',{'SchedWaveTrig', '-center_poke-stimA1-stimA2', ...
			    'SoundOut',viol_sound_id, 'DOut', center1led},...
			'input_to_statechange', {'Tup', 'current_state+1'});
		sma = add_state(sma, 'self_timer', max(0.001, violation_iti-viol_snd_duration), ...
			'input_to_statechange',{'Tup','check_next_trial_ready'});
		
		sma = add_state(sma,'name','timeout_state','self_timer', timeout_duration,...
			'output_actions',{'SoundOut',to_sound_id},...
			'input_to_statechange',{'Tup','check_next_trial_ready'});
		
		
		varargout{2} = {'check_next_trial_ready'};
		
		varargout{1} = sma;
		
		% Not all 'prepare_next_trial_states' are defined in all training
		% stages. So we send to dispatcher only those states that are
		% defined.
		state_names = get_labels(sma); state_names = state_names(:,1);
		prepare_next_trial_states = {'hit_state','second_hit_state', 'error_state', 'violation_state','timeout_state'};
		dispatcher('send_assembler', sma, intersect(state_names, prepare_next_trial_states));
		
	case 'get_state_colors',
		varargout{1} = struct( ...
			'wait_for_cpoke',             [0.68  1   0.63], ...
			'cp',                       [0.63  1   0.94], ...
			'cp_legal_cbreak_period',   [0.63  1   0.94]*0.8, ...
			'sideled_on',     [1   0.79  0.63], ...
			'wait_for_collecting_reward', [0.53 0.78 1.00],...
			'hit_state', [0.77 0.60 0.48], ...
			'second_hit_state',      [0.25 0.45 0.48], ...
			'drink_time',        [0    1    0],    ...
			'drink_state',        [0    1    0],    ...
			'error_state',  [1    0.54 0.54], ...
			'violation_state',            [0.31 0.48 0.30], ...
			'timeout_state', 0.8*[0.31 0.48 0.30]);
		%            'go_cue_on',                [0.63  1   0.94]*0.6, ...
		%            'prerw_postcs',      [0.25 0.45 0.48], ...
		%             'lefthit',           [0.53 0.78 1.00], ...
		%             'lefthit_pasound',   [0.53 0.78 1.00]*0.7, ...
		%             'righthit',          [0.52 1.0  0.60], ...
		%             'righthit_pasound',  [0.52 1.0  0.60]*0.7, ...
		%             'warning',           [0.3  0    0],    ...
		%             'danger',            [0.5  0.05 0.05], ...
		%             'hit',               [0    1    0]
		
		
		
		
	case 'reinit',
		currfig = gcf;
		
		% Delete all SoloParamHandles who belong to this object and whose
		% fullname starts with the name of this mfile:
		delete_sphandle('owner', ['^@' class(obj) '$'], ...
			'fullname', ['^' mfilename]);
		
		
		% Reinitialise at the original GUI position and figure:
		feval(mfilename, obj, 'init');
		
		% Restore the current figure:
		figure(currfig);
		
	otherwise
		warning('do not know how to do %s',action);
end